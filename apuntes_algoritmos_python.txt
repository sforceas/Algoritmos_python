apuntes_algoritmos_python.txt

1.  Programación orientada a objetos en Python

    Uso de clases para organizar programas en modulos y abstracciones de datos
    En este curso se usan clases orientadas a objetos.
    Objeto: agrupación de datos y métodos que operan esos datos.

    Las clases permiten crear nuevos "tipos" de datos que contienen información arbitraria sobre un objeto.
    Las clases solo proveen la estructura para construir objetos. Señalan las propiedades del objeto, pero no son ninguno en concreto.
    
    Para crear objetos especificos se usan Instancias.

    - Clases: formulario 
    - Instancias: cada copia rellena de datos del formulario

    Pueden existir varias instancias diferentes que pertenezcan a la misma clase.
    para definir una clase se usa el keyword : class.
    
    Ejemplo
            class Hotel:
                <atributos>
            hotel1 = Hotel(<atributos>)
    
    Ejemplo: clases_hotel.py

    Atributos de instancia: son las caracteristicas de cada objeto(instancia) creado a partir de una clase.
    Se usa el método especial "def__init__" para definir los atributos. Se definen con el parámetro self.<nombre_atributo> = <nombre_variable>

    Ejemplo:
            class Hotel:

                def __init__ (self,valorA,valorB):
                    self.valorA = numeroA
                    self.valorB = numeroB
            hotel1 = Hotel (numeroA=1,numeroB=2)

    Métodos de instancia: realizan operaciones con los atributos de la clase. Equivalen a funciones dentro de la definicion de la clase y reciben self. como primer argumento.

    Ejemplo:

            class Hotel:
            ...
            def añadir_valorC(self,numeroC)
                self.valorC += numeroC #suma a valorC el numeroC (suma: +=, resta -=)

Decomposición: partir un problema en partes mas sencillos que son clases.
    Ejemplo: decomposicion.txt

Abstracción: enfocarnos en la informacion relevante
Separa info central (variables publicos) de detalles secundarios (_variables_privadas)
La interfaz con el usuario requiere de variables y métodos PUBLICOS, pero si no le interesa se pone en privado con el _metodo
    Ejemplo: abstracciones.py

Ecampsulación: agrupar datos y comportamiento en un mismo lugar importante en el Defensive Programing para proteger el acceso y modificacion de los datos.
    Ejemplo: encapsulacion.py


           